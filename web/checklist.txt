1. ensure store preview card shows below detailed produce card in detailed produce page. should show just the store name and location
2. store preview card navigates to /store:id
3. ensure all list renders include object key via id
4. design store details page to contain the store details, the farmer details, the produce list, and the available ratings
    4.1 available ratings = total score of ratings out of 5 across all produce sold / total ratings
5. update backend API
    5.1 implement properly for user may have only one active cart. this means that until that cart undergoes checkout, the user may not create another cart
    5.2 implement search API. return stores and produce that match
        a. endpoint: /search?q=string
        b. update repo and services layer of store and produce to getByName
        c. search controller passes query to store and produce services
        d. return: {stores: [store], produce: [produce]}
6. implement add to cart functionality
    6.1 if no active cart exists for current user, create new cart then only add the item
    6.2 if active cart exists, add item to cart
    6.3 show icon on top of cart icon to show number of items in cart
7. implement cart page
    7.1 when user clicks on cart icon, navigate to /cart
    7.2 show all items in user's cart
        a. in table form
        b. each row should show the produce name, quantity, price, and total price
        c. show button to remove item from cart
        d. allow user to modify quantity while adhering to the produce's quantity available
        e. the produce name for each row should be a link to the produce details page
    7.3 show total price of all items in cart
    7.4 show button to checkout which goes to /payment
8. implement payment page
    8.1 when user clicks on checkout button, navigate to /payment
    8.2 show all items in user's cart
        a. in table form
        b. each row should show the produce name, quantity, price, and total price
        c. show total price of all items in cart
    8.3 show the store location, farmer's name, phone no
    8.4 input for user to set pickup date and time
    8.5 input for user to set payment method
    8.x show button to confirm payment, after click, make necessary API requests and some loading time, then navigate to /orders and toast.success for successully placed order
9. implement orders page
    9.1 show all of user's orders in history
    9.2 each row should show the store name, produce name, quantity, price, total price, pickup date and time, and status
    9.3 show button to cancel order
    9.4 if order completed, show ratings option
        a. Stars
        b. Word comment
        c. both a & b are mandatory to submit for ratings
10. in db schema, move the ratings and reviews field from Order to cart_item instead
11. the footer. add logo in the middle, and subject code and subject name, and best viewed on wide screens
12. implement password change functionality. 
    12.1 add forgot password in login, and reset password in account profile
    12.2 when clicked, implement the password thing as suggested by ChatGPT
    12.3 create a landing page for password-resets
13. implement store edit details functionality
14. for every produce based card, ensure last updated shown
    14.1 if greater than 5 days since last update (assuming added to store), add text to warn produce has been added to store 5 or more days
    14.2 if user decides to add to cart, warn them. upon proceeding, then only remove the warning and proceed normally
    14.3 no need to implement in cart page
15. integration with Azure maps
    14.1 fetch credentials from Azure
    14.2 create sample map component on frontend
    14.3 implement necessary backend APIs
    14.4 integrate
